/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
#include "stm32f429i_discovery.h"
#include "time.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f4xx_flash.h"
#include "stm32f4xx_usart.h"
#include "system_stm32f4xx.h"

void Clock_Config();
void GPIO_Config();
void USART_Config();
void USART1_Send_String(char *message);
static void LCD_Config(void);

uint32_t timeStamp = 0;

int main(void)
{
	SystemInit();
	SystemCoreClockUpdate();
	Init_Time(MILLISEC,180);

	Clock_Config();
	GPIO_Config();
	USART_Config();
	LCD_Config();

	LCD_Init();
	/* LCD Configuration */
	LCD_LayerInit();
	/* Enable LCD display */
	LCD_DisplayOn();
	/* Set foreground layer */
	LCD_CtrlLinesConfig();

	LCD_SetLayer(LCD_FOREGROUND_LAYER);
	/* Clear the LCD */
	LCD_Clear(LCD_COLOR_WHITE);
	/* Set the LCD Back Color */
	LCD_SetBackColor(LCD_COLOR_WHITE);
	/* Set the LCD Text Color */
	LCD_SetTextColor(LCD_COLOR_BLUE);
	LCD_DisplayStringLine(LCD_LINE_0, (uint8_t *)" STM324x9I-EVAL ");
	LCD_DisplayStringLine(LCD_LINE_1, (uint8_t *)" Example on how to ");
	LCD_DisplayStringLine(LCD_LINE_2, (uint8_t *)" use the IO Expander ");
	for(;;)
	{
		if ((Millis() - timeStamp) > 1000 )
		{
			timeStamp = Millis();
			GPIOG->ODR ^= GPIO_Pin_13;
			USART1_Send_String("Blink!!\n");
		}
	}
}

void Clock_Config()
{

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

}


void GPIO_Config()
{

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

	GPIO_InitTypeDef LEDs_Config;

	LEDs_Config.GPIO_Speed = GPIO_Speed_100MHz;
	LEDs_Config.GPIO_Mode = GPIO_Mode_OUT;
	LEDs_Config.GPIO_OType = GPIO_OType_PP;
	LEDs_Config.GPIO_PuPd = GPIO_PuPd_NOPULL;
	LEDs_Config.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;

	GPIO_Init(GPIOG, &LEDs_Config);

}

void USART_Config()
{



	//TODO: Need to configure USART1 GPIO Pins
	GPIO_InitTypeDef USARTPin_Config;

	USARTPin_Config.GPIO_Speed = GPIO_Speed_100MHz;
	USARTPin_Config.GPIO_Mode = GPIO_Mode_AF;
	USARTPin_Config.GPIO_OType = GPIO_OType_PP;
	USARTPin_Config.GPIO_PuPd = GPIO_PuPd_UP;
	USARTPin_Config.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;

	GPIO_Init(GPIOA, &USARTPin_Config);


	USART_InitTypeDef Serial_Config;

	Serial_Config.USART_BaudRate = 2764800;
	Serial_Config.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	Serial_Config.USART_Parity = USART_Parity_No;
	Serial_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	Serial_Config.USART_StopBits = USART_StopBits_1;
	Serial_Config.USART_WordLength = USART_WordLength_8b;

	USART_Init(USART1, &Serial_Config);

	USART_Cmd(USART1, ENABLE);
}

void USART1_Send_String(char *message)
{
	while(*message)
	{
	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET){}
	USART_SendData(USART1, *message++);
	}

}

static void LCD_Config(void)
{
  LTDC_InitTypeDef               LTDC_InitStruct;
  LTDC_Layer_InitTypeDef         LTDC_Layer_InitStruct;
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
  LCD_ChipSelect(DISABLE);
  LCD_ChipSelect(ENABLE);

  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig();

  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();

  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);

  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE);

  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();

  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();

/* Enable Pixel Clock --------------------------------------------------------*/

  /* Configure PLLSAI prescalers for LCD */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/3 = 64 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 64/8 = 8 Mhz */
  RCC_PLLSAIConfig(192, 7, 3);
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);

  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
  {
  }

/* LTDC Initialization -------------------------------------------------------*/

  /* Initialize the horizontal synchronization polarity as active low*/
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;
  /* Initialize the vertical synchronization polarity as active low */
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;
  /* Initialize the pixel clock polarity as input pixel clock */
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;

  /* Timing configuration */
    /* Configure horizontal synchronization width */
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29;
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;
  /* Configure accumulated active width */
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279;
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;

  LTDC_Init(&LTDC_InitStruct);

  /* Configure R,G,B component values for LCD background color */
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;

  LTDC_Init(&LTDC_InitStruct);

/* LTDC initialization end ---------------------------------------------------*/

/* Layer1 Configuration ------------------------------------------------------*/

  /* Windowing configuration */
  /* In this case all the active display area is used to display a picture then :
     Horizontal start = horizontal synchronization + Horizontal back porch = 30
     Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
     Vertical start   = vertical synchronization + vertical back porch     = 4
     Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (240 + 30 - 1);
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (160 + 4 - 1); //320

  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;

  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255;

  /* Configure blending factors */
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;

  /* Default Color configuration (configure A,R,G,B component values) */
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 255;
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 255;
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 255;
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 255;

  /* Input Address configuration */
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = (uint32_t)&logo;

  /* the length of one line of pixels in bytes + 3 then :
     Line Lenth = Active high width x number of bytes per pixel + 3
     Active high width         = 240
     number of bytes per pixel = 2    (pixel_format : RGB565)
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((60 * 2) + 3);

  /*  the pitch is the increment from the start of one line of pixels to the
      start of the next line in bytes, then :
      Pitch = Active high width x number of bytes per pixel
  */
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (60 * 2);

  /* configure the number of lines */
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 60;

  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);

  LTDC_DitherCmd(ENABLE);
}
